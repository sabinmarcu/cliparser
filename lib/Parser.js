// Generated by LiveScript 1.2.0
(function(){
  var IS, Parser, slice$ = [].slice;
  IS = require("isf");
  Parser = (function(superclass){
    var prototype = extend$((import$(Parser, superclass).displayName = 'Parser', Parser), superclass).prototype, constructor = Parser;
    Parser.extend(IS.DefineProperty.extend);
    Parser.extend(IS.Modules.Overload);
    Parser.define("raw_args", function(){
      return this._raw_args;
    }, function(){
      var args;
      args = slice$.call(arguments);
      if (args.length === 1) {
        if (args[0].substr != null) {
          return this._raw_args = args[0].split(" ");
        } else {
          return this._raw_args = args[0];
        }
      } else {
        return this._raw_args = args;
      }
    });
    function Parser(){
      var args, this$ = this instanceof ctor$ ? this : new ctor$;
      args = slice$.call(arguments);
      this$.booleanify = bind$(this$, 'booleanify', prototype);
      this$.expect = bind$(this$, 'expect', prototype);
      this$.link = bind$(this$, 'link', prototype);
      this$.doParse = bind$(this$, 'doParse', prototype);
      this$.parse = bind$(this$, 'parse', prototype);
      this$.parse.apply(this$, args);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.parse = function(){
      var args;
      args = slice$.call(arguments);
      if (args.length === 1) {
        this.raw_args = args[0];
      } else {
        this.raw_args = args;
      }
      return this.doParse();
    };
    prototype.doParse = function(){
      var args, item, lastOpt, lastOptNo, opt, opts, i$, len$;
      this.bareArgs = [];
      this.singleDashArgs = {
        length: 0
      };
      this.doubleDashArgs = {
        length: 0
      };
      this.finalArg = null;
      args = [];
      import$(args, this.raw_args);
      item = args.shift();
      while (item != null && this.firstLetter(item) !== "-") {
        this.bareArgs.push(item);
        item = args.shift();
      }
      lastOpt = null;
      lastOptNo = 0;
      while (item) {
        if (this.firstLetter(item) === "-") {
          if (this.secondLetter(item) === "-") {
            opt = item.substr(2);
            this.doubleDashArgs[opt] = this.doubleDashArgs[this.doubleDashArgs.length] = [];
            this.doubleDashArgs.length += 1;
            lastOpt = this.doubleDashArgs[opt];
            lastOptNo = 0;
          } else {
            opts = item.substr(1).split("");
            for (i$ = 0, len$ = opts.length; i$ < len$; ++i$) {
              opt = opts[i$];
              this.singleDashArgs[opt] = this.singleDashArgs[this.singleDashArgs.length] = [];
              this.singleDashArgs.length += 1;
            }
            lastOpt = this.singleDashArgs[opt];
            lastOptNo = 0;
          }
        } else {
          if (lastOptNo === 0 || args.length !== 0) {
            lastOpt.push(item);
            lastOptNo = lastOptNo + 1;
          } else {
            this.finalArg = item;
          }
        }
        item = args.shift();
      }
      return this;
    };
    prototype.link = function(sets){
      var f, t, i$, ref$, len$, item;
      for (f in sets) {
        t = sets[f];
        if (this.secondLetter(f) === "-") {
          f = f.substr(2);
          t = t.substr(1);
          if (this.doubleDashArgs[f] == null) {
            this.doubleDashArgs[f] = this.doubleDashArgs[this.doubleDashArgs.length++] = [];
          }
          if (this.singleDashArgs[t] == null) {
            this.singleDashArgs[t] = this.singleDashArgs[this.singleDashArgs.length++] = [];
          }
          for (i$ = 0, len$ = (ref$ = this.doubleDashArgs[f]).length; i$ < len$; ++i$) {
            item = ref$[i$];
            if (!in$(item, this.singleDashArgs[t])) {
              this.singleDashArgs[t].push(item);
            }
          }
          for (i$ = 0, len$ = (ref$ = this.singleDashArgs[t]).length; i$ < len$; ++i$) {
            item = ref$[i$];
            if (!in$(item, this.doubleDashArgs[f])) {
              this.doubleDashArgs[f].push(item);
            }
          }
        } else {
          f = f.substr(1);
          t = t.substr(2);
          if (this.doubleDashArgs[t] == null) {
            this.doubleDashArgs[t] = this.doubleDashArgs[this.doubleDashArgs.length++] = [];
          }
          if (this.singleDashArgs[f] == null) {
            this.singleDashArgs[f] = this.singleDashArgs[this.singleDashArgs.length++] = [];
          }
          for (i$ = 0, len$ = (ref$ = this.doubleDashArgs[t]).length; i$ < len$; ++i$) {
            item = ref$[i$];
            if (!in$(item, this.singleDashArgs[f])) {
              this.singleDashArgs[f].push(item);
            }
          }
          for (i$ = 0, len$ = (ref$ = this.singleDashArgs[f]).length; i$ < len$; ++i$) {
            item = ref$[i$];
            if (!in$(item, this.doubleDashArgs[t])) {
              this.doubleDashArgs[t].push(item);
            }
          }
        }
      }
      return this;
    };
    prototype.expect = function(){
      var sets, i$, len$, ex;
      sets = slice$.call(arguments);
      if (sets == null) {
        return;
      }
      if (sets.length === 1 && sets[0].length != null && sets[0].length > 0) {
        sets = sets[0];
      }
      for (i$ = 0, len$ = sets.length; i$ < len$; ++i$) {
        ex = sets[i$];
        if (this.secondLetter(ex) === "-") {
          ex = ex.substr(2);
          if (this.doubleDashArgs[ex] == null) {
            this.doubleDashArgs[ex] = null;
          }
        } else {
          ex = ex.substr(1);
          if (this.singleDashArgs[ex] == null) {
            this.singleDashArgs[ex] = null;
          }
        }
      }
      return this;
    };
    prototype.booleanify = function(){
      var arg, ref$, items;
      for (arg in ref$ = this.singleDashArgs) {
        items = ref$[arg];
        if (items === null) {
          if (this.singleDashArgs[arg] == null) {
            this.singleDashArgs[arg] = this.singleDashArgs[this.singleDashArgs.length++] = false;
          } else {
            this.singleDashArgs[arg] = false;
          }
        } else if (items.length === 0) {
          this.singleDashArgs[arg] = true;
        }
      }
      for (arg in ref$ = this.doubleDashArgs) {
        items = ref$[arg];
        if (items === null) {
          if (this.doubleDashArgs[arg] == null) {
            this.doubleDashArgs[arg] = this.doubleDashArgs[this.doubleDashArgs.length] = false;
          } else {
            this.doubleDashArgs[arg] = false;
          }
        } else if (items.length === 0) {
          this.doubleDashArgs[arg] = true;
        }
      }
      return this;
    };
    prototype.firstLetter = function(string){
      return string.substr(0, 1);
    };
    prototype.secondLetter = function(string){
      return string.substr(1, 1);
    };
    return Parser;
  }(IS.Object));
  module.exports = Parser;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
