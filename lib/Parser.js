// Generated by CoffeeScript 1.3.3
(function() {
  var ERRORS, ErrorReporter, Parser,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Parser = (function() {

    Parser._activeParser = null;

    Parser._lastArgv = null;

    Parser.parse = function(arg) {
      if (!(arg != null)) {
        throw ErrorReporter.generate(1);
      }
      if ((this._activeParser != null) && this._lastArgv === arg) {
        return this._activeParser.results;
      } else {
        return this.reparse(arg);
      }
    };

    Parser.reparse = function(arg) {
      if (!(arg != null)) {
        throw ErrorReporter.generate(1);
      }
      this._activeParser = new Parser(arg);
      return this._activeParser.results;
    };

    function Parser(args) {
      if (!(args != null)) {
        throw ErrorReporter.generate(2);
      }
      if (args.substr != null) {
        args = args.splice(" ");
      }
      this.s = [];
      this.ds = {};
      this.dds = {};
      this.rawArgs = args;
      this.results = {};
      this._parse();
    }

    Parser.prototype._parse = function(args) {
      var index, results, run, walk, _parser;
      if (args == null) {
        args = this.rawArgs;
      }
      if (args !== this.rawArgs) {
        this.rawArgs = args;
      }
      index = 0;
      while ((this.rawArgs[index] != null) && this.rawArgs[index][0] !== "-") {
        this.s.push(this.rawArgs[index++]);
      }
      walk = function(from) {
        var list;
        list = [];
        while ((this.rawArgs[from] != null) && this.rawArgs[from][0] !== "-") {
          list.push(this.rawArgs[from++]);
        }
        return list;
      };
      _parser = this;
      run = function() {
        var args, what;
        what = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return what.apply(_parser, args);
      };
      while (this.rawArgs[index] != null) {
        results = run(walk, index + 1);
        if (this.rawArgs[index][1] === "-") {
          this.dds[this.rawArgs[index].substr(2)] = results;
        } else {
          this.ds[this.rawArgs[index].substr(1)] = results;
        }
        index += results.length + 1;
      }
      return this.results = {
        single: this.s,
        dash: this.ds,
        doubledash: this.dds
      };
    };

    return Parser;

  })();

  module.exports = Parser;

  ErrorReporter = (function(_super) {

    __extends(ErrorReporter, _super);

    ErrorReporter.generate = function(errorCode) {
      if (ERRORS[errorCode] != null) {
        return new ErrorReporter(errorCode);
      } else {
        return new ErrorReporter(0);
      }
    };

    function ErrorReporter(errorCode) {
      if (errorCode) {
        this.name = "ParserError";
      } else {
        this.name = "UnknownError";
      }
      this.message = ERRORS[errorCode];
      this.errorCode = errorCode;
    }

    return ErrorReporter;

  })(TypeError);

  ERRORS = ["There is no error to be handled by the Parser O.o", "No Arguments have been supplied in the factory", "No Arguments have been supplied in the parser object"];

}).call(this);
